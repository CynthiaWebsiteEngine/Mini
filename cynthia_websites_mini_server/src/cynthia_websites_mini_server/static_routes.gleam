import bungibindies/bun/http/serve/response
import bungibindies/bun/spawn
import cynthia_websites_mini_server/mutable_model_type
import cynthia_websites_mini_server/utils/files.{client_css, client_js}
import cynthia_websites_mini_shared
import cynthia_websites_mini_shared/configtype
import cynthia_websites_mini_shared/ui
import gleam/dict
import gleam/javascript/array
import gleam/list
import gleam/option.{type Option, None, Some}
import gleam/string
import javascript/mutable_reference

import plinth/node/process
import simplifile

pub fn static_routes(mutable_model: mutable_model_type.MutableModel) {
  let model = mutable_model |> mutable_reference.get()
  dict.new()
  |> dict.insert("/index.html", main(model.config))
  |> dict.insert("/404", notfound())
  |> Some
}

pub fn index_html(gc: configtype.SharedCynthiaConfigGlobalOnly) {
  "<!DOCTYPE html>
<html lang='en'>
<!--
  This site is hosted and generated by Cynthia Mini " <> cynthia_websites_mini_shared.version() <> ", a mostly-static site generator written in Gleam.

  Also see: <https://github.com/CynthiaWebsiteEngine/Mini>
-->

<head>
<title>&lt;&lt;site hosted by Cynthia mini&gt;&gt;</title>
<meta property='og:site_name' content='" <> gc.global_site_name <> "'/>
<meta property='og:description' content='" <> gc.global_site_description <> "'/>
<meta name='theme-color' content='" <> gc.global_colour <> "' />
<link rel='shortcut icon' href='./assets/site_icon.png' type='image/x-icon'/>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<script type='module'>
  // Cynthia Mini Client JS, minified by Bun.\n\n\n
" <> client_js() <> "
</script>
<style>" <> client_css() <> "</style>
</head>
<body>
  <div id='viewable' class='bg-base-100 w-screen h-screen'>
  </div>
 " <> footer(True, gc.git_integration) <> "
</body>
</html>
"
}

fn main(gc: configtype.SharedCynthiaConfigGlobalOnly) {
  response.new()
  |> response.set_body(index_html(gc))
  |> response.set_headers(
    [#("Content-Type", "text/html; charset=utf-8")]
    |> array.from_list(),
  )
  |> response.set_status(200)
}

fn notfound() {
  response.new()
  |> response.set_body("<!DOCTYPE html>
  <html lang='en'>
  <head>
  <title>cynthia_websites_mini_server</title>
  <meta charset='utf-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <script type='module'>
  " <> client_js() <> "
  </script>
  <style>" <> client_css() <> "</style>
  </head>
  <body data-404='true' class='bg-base-100 w-[100VW] h-[100VH]'>
    " <> ui.notfoundbody() <> "
    </body>
      </html>
")
  |> response.set_headers(
    [#("Content-Type", "text/html; charset=utf-8")]
    |> array.from_list(),
  )
  |> response.set_status(404)
}

pub fn footer(can_hide: Bool, git_integration: Bool) {
  let f = case git_integration {
    True ->
      [ui.footer]
      |> list.append(
        case { simplifile.is_directory(process.cwd() <> "/.git/") } {
          Ok(True) -> {
            [
              ", created from "
              <> case { todo } {
                Some(reponame) -> reponame
                None -> "a git repo"
              },
            ]
          }
          _ -> {
            []
          }
        },
      )
      |> string.concat
    False -> ui.footer
  }
  "<footer id='cynthiafooter' class='footer transition-all duration-[2s] ease-in-out footer-center bg-base-300 text-base-content p-1 h-fit fixed bottom-0'><aside><p>"
  <> f
  <> "</p></aside></footer>"
  <> case can_hide {
    True ->
      "
    <script defer>
	window.setTimeout(function () {
		console.log('now scroll.');
		window.addEventListener('scroll',
			function () {
				const classname = 'max-h-[5px]';
				document.querySelector('#cynthiafooter').style.height = '5px';
				document.querySelector('#cynthiafooter').addEventListener('click', function () {
					document.querySelector('#cynthiafooter').style.height = '';
				});
			},
			true,
		);
	}, 4000);
       </script>"
    False -> ""
  }
}

/// If succeeds, returns a html link to the current commit on the remote, by just removing the last part of the URL and adding "/commit/<commit_hash>".
fn helper_get_git_remote() -> Option(String) {
  todo
}
